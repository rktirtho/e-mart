version: '3.1'

services:

  inventory_DB:
    image: mysql:latest
    container_name: inventory_DB
    restart: always
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: sergey
      MYSQL_DATABASE: inventory_service
      MYSQL_USER: root_user
      MYSQL_PASSWORD: root_user
    networks:
      e-mart:

  order_DB:
    image: mysql:latest
    container_name: order_DB
    restart: always
    ports:
      - "3308:3306"
    environment:
      MYSQL_ROOT_PASSWORD: sergey
      MYSQL_DATABASE: order_service
      MYSQL_USER: root_user
      MYSQL_PASSWORD: root_user
    networks:
      e-mart:
  users_db:
    image: postgres
    container_name: users_db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: root
      POSTGRES_DB: 'tutos'
    networks:
      - e-mart

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

  product_db:
    image: mongo
    restart: always
    container_name: mongo
    networks:
      - e-mart
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: products_service
      MONGODB_DATABASE: test1
    volumes:
      - ./docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  mongo-express:
    image: mongo-express
    restart: always
    depends_on:
      - product_db
    networks:
      - e-mart
    ports:
      - "8079:8081"
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: root
      ME_CONFIG_BASICAUTH_PASSWORD: root
      ME_CONFIG_MONGODB_PORT: 27018
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root
    links:
      - product_db
  zipkin:
    image: openzipkin/zipkin:latest
    container_name: tracing_service
    ports:
      - "9411:9411"
    networks:
      - e-mart


  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    networks:
      - e-mart
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.3.2
    container_name: broker
    networks:
      - e-mart
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

#  kafka-ui:
#    image: consdata/kouncil:latest
#    container_name: kafka-ui
#    networks:
#      - e-mart
#    environment:
#      - BOOTSTRAP_SERVERS="broker:9092"
#      - kouncil.auth.active-provider="inmemory"
#    ports:
#      - 8089:8080

#  prometheus:
#    image: prom/prometheus:v2.37.1
#    container_name: prometheus
#    restart: always
#    networks:
#      - e-mart
#    ports:
#      - "9090:9090"
#    volumes:
#      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
##    depends_on:
##      - product-service
##      - inventory-service
##      - order-service
##      - notification-service
#
#  grafana:
#    image: grafana/grafana-oss:8.5.2
#    container_name: grafana
#    restart: always
#    networks:
#      - e-mart
#    ports:
#      - "3000:3000"
#    links:
#      - prometheus:prometheus
#    volumes:
#      - ./grafana:/var/lib/grafana
#    environment:
#      - GF_SECURITY_ADMIN_USER=admin
#      - GF_SECURITY_ADMIN_PASSWORD=password

networks:
  e-mart:

